amazing_logo=r'''
                ______  ______  ____        ______  __  __  ____    ____     _____
        /'\_/`\/\  _  \/\__  _\/\  _`\     /\__  _\/\ \/\ \/\  _`\ /\  _`\  /\  __`\
  _ __ /\      \ \ \L\ \/_/\ \/\ \,\L\_\   \/_/\ \/\ \ \ \ \ \ \L\ \ \ \L\ \\ \ \/\ \
 /\`'__\ \ \__\ \ \  __ \ \ \ \ \/_\__ \      \ \ \ \ \ \ \ \ \ ,  /\ \  _ <'\ \ \ \ \
 \ \ \/ \ \ \_/\ \ \ \/\ \ \ \ \  /\ \L\ \     \ \ \ \ \ \_\ \ \ \\ \\ \ \L\ \\ \ \_\ \
  \ \_\  \ \_\\ \_\ \_\ \_\ \ \_\ \ `\____\     \ \_\ \ \_____\ \_\ \_\ \____/ \ \_____\
   \/_/   \/_/ \/_/\/_/\/_/  \/_/  \/_____/      \/_/  \/_____/\/_/\/ /\/___/   \/_____/


  ____                        ___
 /\  _`\   __                /\_ \    __
 \ \ \L\ \/\_\  _____      __\//\ \  /\_\    ___      __
  \ \ ,__/\/\ \/\ '__`\  /'__`\\ \ \ \/\ \ /' _ `\  /'__`\
   \ \ \/  \ \ \ \ \L\ \/\  __/ \_\ \_\ \ \/\ \/\ \/\  __/
    \ \_\   \ \_\ \ ,__/\ \____\/\____\\ \_\ \_\ \_\ \____\
     \/_/    \/_/\ \ \/  \/____/\/____/ \/_/\/_/\/_/\/____/
                  \ \_\
                   \/_/ 
'''
print(amazing_logo)

# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("set -o nounset -o pipefail -o errexit -x; ")

# Python imports
import subprocess
import shutil
import glob
import os
import re

# Parameters from config.yaml
SAMPLES = config["SAMPLES"]
COMPARISONS = config["COMPARISONS"]
DATA_TYPE = config["DATA_TYPE"]
GTF_PATH = config["GTF_PATH"]
STAR_INDEX = config["STAR_INDEX"]
READ_LENGTH = int(config["READ_LENGTH"])
THREADS = int(config["THREADS"])
OPT_RMATS_ARGS = config["OPT_RMATS_ARGS"]
TEMP_DIR = config["TEMP_DIR"]
RESULT_PATH = config["RESULT_PATH"]
CONTAINER_TYPE = config["CONTAINER_TYPE"]

# Create temporary directory
if not os.path.exists(os.path.abspath(TEMP_DIR)):
    os.makedirs(os.path.abspath(TEMP_DIR))

# Create txt files for loading comparisons to rMATs
SAMPLE_CONFIGS = {}
for sample, paths in SAMPLES.items(): 
    sample_fl = os.path.join(TEMP_DIR, f"{sample}.txt")
    SAMPLE_CONFIGS[sample] = sample_fl
    with open(sample_fl, "w") as f:
        path_spec = ",".join(paths)
        f.write(path_spec + "\n")

# Get appropriate container type
if CONTAINER_TYPE == "singularity":
    sif_path = os.path.join(TEMP_DIR, "rmats-turbo.sif")
    if not os.path.isfile(sif_path): 
        print(f"singularity image not found at {sif_path}\n Downloading singularity image")
        os.system(
            f"singularity pull {sif_path} docker://rnabioco/rmats-turbo"
        )

elif CONTAINER_TYPE == "docker":
    #os.system("docker pull rnabioco/rmats-turbo") 
    sys.exit("docker is unsupported at this time")

if DATA_TYPE == "fastq" and STAR_INDEX == "":
    sys.exit("a STAR_INDEX must be provided is DATA_TYPE is set to fastq")

# Rule to generate final outputs
rule all:
    input:
        expand(
            "{results}/{comparison}/summary.txt",
            results=RESULT_PATH,
            comparison=COMPARISONS.keys(),
        )

include: "rules/rmats.snake"

onsuccess:
    shell("date '+%d/%m/%Y %H:%M:%S' > rmats_completed.txt") 
    shell(f"rm -rf {TEMP_DIR}")
